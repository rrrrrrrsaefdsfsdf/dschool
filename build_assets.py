import os
import shutil
import subprocess
import sys
from datetime import datetime


def clean_gen_folder():
    gen_path = 'static/gen'
    
    if os.path.exists(gen_path):
        print(f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ {gen_path}...")
        files = os.listdir(gen_path)
        if files:
            print("–£–¥–∞–ª—è–µ–º—ã–µ —Ñ–∞–π–ª—ã:")
            for file in files:
                if file.endswith('.js'):
                    print(f"  - {file}")
        
        for file in files:
            if file.endswith('.js'):
                os.remove(os.path.join(gen_path, file))
    else:
        os.makedirs(gen_path, exist_ok=True)
    
    print("‚úì –ü–∞–ø–∫–∞ –≥–æ—Ç–æ–≤–∞\n")


def check_source_files():
    misc_path = 'static/misc.js'
    tasks_path = 'static/tasks.js'
    
    if os.path.exists(misc_path) and os.path.exists(tasks_path):
        return misc_path, tasks_path
    
    return None, None


def check_nodejs():
    node_cmd = None
    npm_cmd = None
    
    for cmd in ['node', 'nodejs']:
        try:
            node_version = subprocess.check_output([cmd, '--version'], 
                                                 text=True, stderr=subprocess.DEVNULL).strip()
            node_cmd = cmd
            break
        except:
            continue
    
    for cmd in ['npm', 'npm.cmd']:
        try:
            npm_version = subprocess.check_output([cmd, '--version'], 
                                                text=True, stderr=subprocess.DEVNULL).strip()
            npm_cmd = cmd
            break
        except:
            continue
    
    if node_cmd and npm_cmd:
        print(f"‚úì Node.js: {node_version}")
        print(f"‚úì NPM: {npm_version}\n")
        return True
    
    return False


def build_without_obfuscation():
    print("=== –°–±–æ—Ä–∫–∞ –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏ ===\n")
    
    misc_path, tasks_path = check_source_files()
    if not misc_path:
        print("‚úó –ò—Å—Ö–æ–¥–Ω—ã–µ JS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    gen_path = 'static/gen'
    os.makedirs(gen_path, exist_ok=True)
    
    try:
        shutil.copy2(misc_path, os.path.join(gen_path, 'misc.obf.js'))
        shutil.copy2(tasks_path, os.path.join(gen_path, 'tasks.obf.js'))
        
        print("‚úì –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã (–±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏)")
        verify_results()
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def build_assets():
    print("=== –°–±–æ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è production ===")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    clean_gen_folder()
    
    misc_path, tasks_path = check_source_files()
    if not misc_path:
        print("‚úó –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ static/!")
        return False
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"  - {misc_path}")
    print(f"  - {tasks_path}\n")
    
    if not check_nodejs():
        print("\n‚ö†Ô∏è  Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏...")
        return build_without_obfuscation()
    
    if not os.path.exists('package.json'):
        print("–°–æ–∑–¥–∞–Ω–∏–µ package.json...")
        create_default_package_json()
    
    if not os.path.exists('node_modules') or not os.path.exists('node_modules/javascript-obfuscator'):
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        result = subprocess.run(['npm', 'install'], shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ npm –ø–∞–∫–µ—Ç–æ–≤: {result.stderr}")
            print("–ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏...")
            return build_without_obfuscation()
        print("‚úì –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n")
    
    if not os.path.exists('obfuscator.config.json'):
        print("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä–∞...")
        create_obfuscator_config()
    
    print("–ó–∞–ø—É—Å–∫ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏...")
    success = run_direct_obfuscation(misc_path, tasks_path)
    
    if not success:
        print("\n‚ö†Ô∏è  –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏...")
        success = build_without_obfuscation()
    
    return success


def run_direct_obfuscation(misc_path, tasks_path):
    print("–ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–π –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏...")
    
    files = [
        (misc_path, 'static/gen/misc.obf.js'),
        (tasks_path, 'static/gen/tasks.obf.js')
    ]
    
    for input_file, output_file in files:
        print(f"\n–û–±—Ñ—É—Å–∫–∞—Ü–∏—è {os.path.basename(input_file)}...")
        
        cmd = ['npx', 'javascript-obfuscator', input_file, '--output', output_file]
        
        if os.path.exists('obfuscator.config.json'):
            cmd.extend(['--config', 'obfuscator.config.json'])
        else:
            cmd.extend([
                '--compact', 'true',
                '--control-flow-flattening', 'true',
                '--dead-code-injection', 'true',
                '--string-array', 'true',
                '--string-array-encoding', 'base64'
            ])
        
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚úó –û—à–∏–±–∫–∞: {result.stderr}")
            return False
        
        if os.path.exists(output_file):
            size = os.path.getsize(output_file)
            print(f"‚úì –°–æ–∑–¥–∞–Ω {output_file} ({size:,} –±–∞–π—Ç)")
        else:
            print(f"‚úó –§–∞–π–ª {output_file} –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
    
    verify_results()
    return True


def verify_results():
    gen_path = 'static/gen'
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    
    expected_files = ['misc.obf.js', 'tasks.obf.js']
    
    for filename in expected_files:
        filepath = os.path.join(gen_path, filename)
        if os.path.exists(filepath):
            size = os.path.getsize(filepath)
            print(f"  ‚úì {filename} ({size:,} –±–∞–π—Ç)")
            
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read(500)
                if any(marker in content for marker in ['_0x', 'const _', 'var _']):
                    print(f"    ‚Üí –§–∞–π–ª –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω")
                else:
                    print(f"    ‚Üí –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏")
        else:
            print(f"  ‚úó {filename} –ù–ï –ù–ê–ô–î–ï–ù")
    
    print("\n–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for filename in ['misc.js', 'tasks.js']:
        filepath = os.path.join('static', filename)
        if os.path.exists(filepath):
            size = os.path.getsize(filepath)
            print(f"  ‚úì {filename} ({size:,} –±–∞–π—Ç)")
        else:
            print(f"  ‚úó {filename} –ù–ï –ù–ê–ô–î–ï–ù")


def create_default_package_json():
    package_json = {
        "name": "ds_py",
        "version": "1.0.0",
        "description": "Dark School Security Learning Platform",
        "scripts": {
            "build": "node build_assets.py",
            "build:clean": "npm run clean && npm run build",
            "obfuscate": "npm run obfuscate:misc && npm run obfuscate:tasks",
            "obfuscate:misc": "javascript-obfuscator static/misc.js --output static/gen/misc.obf.js --config obfuscator.config.json",
            "obfuscate:tasks": "javascript-obfuscator static/tasks.js --output static/gen/tasks.obf.js --config obfuscator.config.json",
            "clean": "rimraf static/gen/*.js",
            "dev": "echo '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ static/'"
        },
        "devDependencies": {
            "javascript-obfuscator": "^4.1.0",
            "rimraf": "^5.0.5"
        },
        "author": "",
        "license": "ISC"
    }
    
    import json
    with open('package.json', 'w', encoding='utf-8') as f:
        json.dump(package_json, f, indent=2)
    print("‚úì –°–æ–∑–¥–∞–Ω package.json")


def create_obfuscator_config():
    config = {
        "compact": True,
        "controlFlowFlattening": True,
        "controlFlowFlatteningThreshold": 0.75,
        "deadCodeInjection": True,
        "deadCodeInjectionThreshold": 0.4,
        "debugProtection": False,
        "debugProtectionInterval": 0,
        "disableConsoleOutput": False,
        "identifierNamesGenerator": "hexadecimal",
        "log": False,
        "numbersToExpressions": True,
        "renameGlobals": False,
        "rotateStringArray": True,
        "selfDefending": True,
        "simplify": True,
        "splitStrings": True,
        "splitStringsChunkLength": 10,
        "stringArray": True,
        "stringArrayCallsTransform": True,
        "stringArrayCallsTransformThreshold": 0.5,
        "stringArrayEncoding": ["base64"],
        "stringArrayIndexShift": True,
        "stringArrayRotate": True,
        "stringArrayShuffle": True,
        "stringArrayWrappersCount": 2,
        "stringArrayWrappersChainedCalls": True,
        "stringArrayWrappersParametersMaxCount": 4,
        "stringArrayWrappersType": "function",
        "stringArrayThreshold": 0.75,
        "transformObjectKeys": True,
        "unicodeEscapeSequence": False
    }
    
    import json
    with open('obfuscator.config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2)
    print("‚úì –°–æ–∑–¥–∞–Ω obfuscator.config.json")


if __name__ == "__main__":
    print("\nüöÄ Dark School - –°–±–æ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤\n")
    
    if build_assets():
        print("\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:")
        print("  static/")
        print("    ‚îú‚îÄ‚îÄ misc.js        (–æ—Ä–∏–≥–∏–Ω–∞–ª)")
        print("    ‚îú‚îÄ‚îÄ tasks.js       (–æ—Ä–∏–≥–∏–Ω–∞–ª)")
        print("    ‚îî‚îÄ‚îÄ gen/")
        print("        ‚îú‚îÄ‚îÄ misc.obf.js  (–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
        print("        ‚îî‚îÄ‚îÄ tasks.obf.js (–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
        print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("  - Development: USE_OBFUSCATED=False")
        print("  - Production: USE_OBFUSCATED=True")
    else:
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ")